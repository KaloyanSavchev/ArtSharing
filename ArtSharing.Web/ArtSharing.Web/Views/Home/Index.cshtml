@model List<ArtSharing.Data.Models.Models.Post>
@using ArtSharing.Data.Models.Models

@{
    ViewData["Title"] = "Home";
}

<h1 class="text-center my-4">🖼️ Art Feed</h1>

<div class="container">
    <!-- Filter Controls -->
    <div class="row mb-4">
        <div class="col-md-5">
            <input type="text" id="searchInput" class="form-control" placeholder="Search by title or description..." />
        </div>
        <div class="col-md-3">
            <select id="sortOrder" class="form-select">
                <option value="newest" selected>Newest</option>
                <option value="oldest">Oldest</option>
                <option value="popular">Most Liked</option>
                <option value="leastliked">Least Liked</option>
            </select>
        </div>
        <div class="col-md-4">
            <div class="position-relative">
                <button class="btn btn-outline-secondary w-100" id="categoryDropdownButton">
                    Select Category
                </button>
                <div id="categoryDropdownMenu" class="list-group mt-2" style="max-height: 200px; overflow-y: auto; display: none;">
                    <a href="#" class="list-group-item list-group-item-action" data-id="">All Categories</a>
                    @if (ViewBag.Categories is List<Category> categories)
                    {
                        foreach (var category in categories)
                        {
                            <a href="#" class="list-group-item list-group-item-action" data-id="@category.Id">@category.Name</a>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Posts Section -->
    <div id="postContainer" class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var post in Model)
        {
            <div class="col">
                @await Html.PartialAsync("_PostCardPartial", post)
            </div>
        }
    </div>

    <div class="text-center mt-4">
        <button id="loadMoreBtn" class="btn btn-outline-primary">Load more</button>
    </div>
</div>

@section Scripts {
    <script>
        let skipCount = @Model.Count;
        const takeCount = 6;

        const postContainer = document.getElementById("postContainer");
        const loadMoreBtn = document.getElementById("loadMoreBtn");
        const searchInput = document.getElementById("searchInput");
        const sortOrder = document.getElementById("sortOrder");

        let selectedCategoryId = "";

        const categoryButton = document.getElementById('categoryDropdownButton');
        const categoryMenu = document.getElementById('categoryDropdownMenu');

        categoryButton.addEventListener('click', function () {
            categoryMenu.style.display = categoryMenu.style.display === 'none' ? 'block' : 'none';
        });

        document.querySelectorAll('#categoryDropdownMenu a').forEach(item => {
            item.addEventListener('click', function (e) {
                e.preventDefault();
                selectedCategoryId = this.getAttribute('data-id');
                categoryButton.textContent = this.textContent;
                categoryMenu.style.display = 'none';
                filterPosts();
            });
        });

        loadMoreBtn.addEventListener("click", async function () {
            const sort = sortOrder.value;
            const response = await fetch(`/Home/LoadMorePosts?skip=${skipCount}&take=${takeCount}&sortOrder=${sort}`);
            const html = await response.text();

            if (html.trim()) {
                postContainer.insertAdjacentHTML("beforeend", html);
                skipCount += takeCount;
            } else {
                loadMoreBtn.style.display = "none";
            }
        });

        async function filterPosts() {
            const search = searchInput.value.trim();
            const sort = sortOrder.value;

            const url = `/Home/FilterPosts?searchTerm=${encodeURIComponent(search)}&categoryId=${selectedCategoryId}&sortOrder=${sort}`;
            const response = await fetch(url);
            const html = await response.text();

            postContainer.innerHTML = html;
            skipCount = document.querySelectorAll("#postContainer .col").length;
            loadMoreBtn.style.display = "block";
        }

        searchInput.addEventListener("input", debounce(filterPosts, 300));
        sortOrder.addEventListener("change", filterPosts);

        function debounce(func, delay) {
            let timeout;
            return function () {
                clearTimeout(timeout);
                timeout = setTimeout(func, delay);
            };
        }
    </script>
}
