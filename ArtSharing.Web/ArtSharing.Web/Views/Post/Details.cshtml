@using ArtSharing.Web.Helpers
@model ArtSharing.Data.Models.Models.Post

@{
    ViewData["Title"] = "Post Details";
}

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-body">
            <h2 class="card-title mb-3 text-primary">@ContentFilter.CensorText(Model.Title)</h2>

            @if (Model.PostImages != null && Model.PostImages.Any())
            {
                <div id="postImagesCarousel" class="carousel slide mb-4" data-bs-ride="carousel">
                    <div class="carousel-inner rounded border">
                        @for (int i = 0; i < Model.PostImages.Count(); i++)
                        {
                            var image = Model.PostImages.ElementAt(i);
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <img src="@image.ImagePath"
                                     class="d-block w-100"
                                     style="max-height:500px; object-fit:contain;"
                                     alt="Image @i" />
                            </div>
                        }
                    </div>

                    @if (Model.PostImages.Count() > 1)
                    {
                        <button class="carousel-control-prev" type="button" data-bs-target="#postImagesCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon"></span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#postImagesCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon"></span>
                        </button>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">No images available for this post.</p>
            }

            <p>
                <strong>Posted by:</strong>
                <a asp-controller="Profile" asp-action="About" asp-route-username="@Model.User.UserName">
                    @ContentFilter.CensorText(Model.User.UserName)
                </a>
            </p>

            <p><strong>Category:</strong> @ContentFilter.CensorText(Model.Category?.Name)</p>
            <p><strong>Description:</strong> @ContentFilter.CensorText(Model.Description)</p>
            <p><small class="text-muted">Posted on: @Model.CreatedAt.ToShortDateString()</small></p>

            @if (User.Identity.IsAuthenticated)
            {
                @await Html.PartialAsync("_LikeButtonPartial", Model)
            }

            <div class="mt-3">
                @if (User.Identity.Name == Model.User.UserName || User.IsInRole("Admin") || User.IsInRole("Moderator"))
                {
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning me-2">Edit</a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger me-2">Delete</a>
                }

                <a asp-controller="Report" asp-action="Post" asp-route-id="@Model.Id" class="btn btn-outline-danger me-2">Report</a>
                <a asp-action="Index" asp-controller="Home" class="btn btn-secondary">Back to Home</a>
            </div>
        </div>
    </div>

    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h4 class="mb-4">💬 Comments</h4>

            @if (User.Identity.IsAuthenticated)
            {
                <form asp-controller="Comment" asp-action="Create" method="post" class="mb-4 comment-form">
                    <input type="hidden" name="PostId" value="@Model.Id" />
                    <textarea name="Content" class="form-control mb-2" rows="3" placeholder="Write a comment..." required></textarea>
                    <button type="submit" class="btn btn-primary">Post Comment</button>
                </form>
            }
            else
            {
                <p><a asp-area="Identity" asp-page="/Account/Login">Log in</a> to comment.</p>
            }

            <div id="commentsSection">
                @await Html.PartialAsync("_CommentsPartial", Model.Comments
                         .Where(c => c.ParentCommentId == null)
                         .OrderBy(c => c.CreatedAt)
                         .Take(3)
                         .ToList())
            </div>

            @if (Model.Comments.Count(c => c.ParentCommentId == null) > 3)
            {
                <div class="text-center mt-3">
                    <button id="loadMoreCommentsBtn" class="btn btn-outline-secondary">Load more comments</button>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.like-form').forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopImmediatePropagation(); // предотвратява двойни изпълнения

                const postId = form.dataset.postId;
                const heartIcon = document.getElementById(`heart-icon-${postId}`);
                const likeCountSpan = document.getElementById(`like-count-${postId}`);
                const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                try {
                    const response = await fetch('/Like/ToggleLike', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ postId })
                    });

                    if (response.ok) {
                        const result = await response.json();

                        likeCountSpan.innerText = `(${result.likeCount} like${result.likeCount === 1 ? '' : 's'})`;

                        heartIcon.textContent = result.hasLiked ? "❤️" : "🤍";
                        heartIcon.className = result.hasLiked ? "heart-icon text-danger" : "heart-icon text-secondary";

                        const container = form.closest(".liked-post-card");
                        if (container && !result.hasLiked && window.location.href.includes("LikedPosts")) {
                            container.remove();
                        }
                    }
                } catch (err) {
                    console.error('Error toggling like:', err);
                }
            });
        });

        let loadedComments = 3;
        const postId = @Model.Id;

        document.getElementById("loadMoreCommentsBtn")?.addEventListener("click", async function () {
            const response = await fetch(`/Post/LoadMoreComments?postId=${postId}&skip=${loadedComments}`);
            const html = await response.text();
            document.getElementById("commentsSection").insertAdjacentHTML("beforeend", html);
            loadedComments += 3;

            if (html.trim() === "") this.remove();
        });

        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("toggle-replies-btn")) {
                const id = e.target.getAttribute("data-comment-id");
                const repliesDiv = document.getElementById(`replies-${id}`);
                if (repliesDiv.style.display === "none" || repliesDiv.style.display === "") {
                    repliesDiv.style.display = "block";
                    e.target.textContent = "Hide replies";
                } else {
                    repliesDiv.style.display = "none";
                    e.target.textContent = `View replies (${repliesDiv.children.length})`;
                }
            }
        });
    </script>
}
