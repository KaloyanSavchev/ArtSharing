@using ArtSharing.Web.Helpers
@model ArtSharing.Data.Models.Models.Post

@{
    ViewData["Title"] = "Post Details";
}

<h2>@ContentFilter.CensorText(Model.Title)</h2>

<img src="@Model.ImagePath" alt="@Model.Title" class="img-fluid rounded mb-3" style="max-height: 500px;" />

<p>
    <strong>Posted by:</strong>
    <a asp-controller="Profile" asp-action="About" asp-route-username="@Model.User.UserName">
        @Model.User.UserName
    </a>
</p>

<p><strong>Category:</strong> @Model.Category.Name</p>
<p><strong>Description:</strong> @ContentFilter.CensorText(Model.Description)</p>
<p><small class="text-muted">Posted on: @Model.CreatedAt.ToShortDateString()</small></p>

@if (User.Identity.IsAuthenticated)
{
    @await Html.PartialAsync("_LikeButtonPartial", Model)
}

@if (User.Identity.Name == Model.User.UserName || User.IsInRole("Admin") || User.IsInRole("Moderator"))
{
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete</a>
}

<a asp-action="Index" asp-controller="Home" class="btn btn-secondary mt-3">Back to Home</a>
<a asp-controller="Report" asp-action="Post" asp-route-id="@Model.Id" class="btn btn-outline-danger">Report</a>

<h4 class="mt-5">💬 Comments</h4>

@if (User.Identity.IsAuthenticated)
{
    <form asp-controller="Comment" asp-action="Create" method="post" class="mb-4 comment-form">
        <input type="hidden" name="PostId" value="@Model.Id" />
        <div class="form-group mb-2">
            <textarea name="Content" class="form-control" placeholder="Write a comment..." required></textarea>
        </div>
        <button type="submit" class="btn">Post Comment</button>
    </form>
}
else
{
    <p><a asp-area="Identity" asp-page="/Account/Login">Log in</a> to comment.</p>
}

<div id="commentsSection">
    @await Html.PartialAsync("_CommentsPartial", Model.Comments
            .Where(c => c.ParentCommentId == null)
            .OrderBy(c => c.CreatedAt)
            .Take(3)
            .ToList())
</div>

@if (Model.Comments.Count(c => c.ParentCommentId == null) > 3)
{
    <div class="text-center mt-3">
        <button id="loadMoreCommentsBtn" class="btn btn-outline-secondary">Load more comments</button>
    </div>
}

@section Scripts {
    <script>
        // Изчистване на вече закачени submit събития (ако случайно има)
        document.querySelectorAll('.like-form').forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                e.stopImmediatePropagation(); // 👉 Спира повторното задействане!

                const postId = form.dataset.postId;
                const heartIcon = document.getElementById(`heart-icon-${postId}`);
                const likeCountSpan = document.getElementById(`like-count-${postId}`);
                const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                try {
                    const response = await fetch('/Like/ToggleLike', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ postId: postId })
                    });

                    if (response.ok) {
                        const result = await response.json();

                        likeCountSpan.innerText = `(${result.likeCount} like${result.likeCount === 1 ? '' : 's'})`;

                        if (result.hasLiked) {
                            heartIcon.textContent = "❤️";
                            heartIcon.classList.remove('text-secondary');
                            heartIcon.classList.add('text-danger');
                        } else {
                            heartIcon.textContent = "🤍";
                            heartIcon.classList.remove('text-danger');
                            heartIcon.classList.add('text-secondary');
                        }
                    }
                } catch (err) {
                    console.error('Error toggling like:', err);
                }
            });
        });

        // КОМЕНТАРИ - остава същото:
        let loadedComments = 3;
        const postId = @Model.Id;

        document.getElementById("loadMoreCommentsBtn")?.addEventListener("click", async function () {
            const response = await fetch(`/Post/LoadMoreComments?postId=${postId}&skip=${loadedComments}`);
            const html = await response.text();
            document.getElementById("commentsSection").insertAdjacentHTML("beforeend", html);
            loadedComments += 3;

            if (html.trim() === "") {
                this.remove();
            }
        });

        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("toggle-replies-btn")) {
                const id = e.target.getAttribute("data-comment-id");
                const repliesDiv = document.getElementById(`replies-${id}`);
                if (repliesDiv.style.display === "none") {
                    repliesDiv.style.display = "block";
                    e.target.textContent = "Hide replies";
                } else {
                    repliesDiv.style.display = "none";
                    e.target.textContent = "View replies";
                }
            }
        });
    </script>
}
